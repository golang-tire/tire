package swagger

import (
	"context"
	"encoding/json"
	"fmt"
	"go/format"
	"io"
	"os"
	"path/filepath"
	"strings"

	"github.com/golang-tire/pkg/log"
	"github.com/golang-tire/tire/cmd"
	"github.com/spf13/cobra"
	"go.uber.org/zap/buffer"
)

var (
	pkgName    string
	outputFile string
)

type swaggerFile struct {
	Swagger     string                 `json:"swagger"`
	Schemes     []string               `json:"schemes"`
	Consumes    []string               `json:"consumes"`
	Produces    []string               `json:"produces"`
	Paths       map[string]interface{} `json:"paths"`
	Definitions map[string]interface{} `json:"definitions"`
}

func swaggerToGo(fileName string) {

	err := log.Init(context.Background(), true)
	if err != nil {
		panic(err)
	}

	filename := strings.Split(filepath.Base(fileName), ".")[0]

	fl, err := os.Open(fileName)
	if err != nil {
		log.Fatal("Open file failed", log.Err(err))
	}

	var swag swaggerFile

	if err = json.NewDecoder(fl).Decode(&swag); err != nil {
		log.Fatal("Can not read valid swagger data")
	}

	out := &buffer.Buffer{}
	write(out, "// Code generated by swagger-to-go. DO NOT EDIT.")
	write(out, "package "+pkgName)
	write(out, `
import (
	"encoding/json"

	"github.com/golang-tire/pkg/grpcgw"
)

`)
	path, err := json.Marshal(swag.Paths)
	checkError(err)
	write(out, fmt.Sprintf("const %s_paths = %q", filename, string(path)))

	def, err := json.Marshal(swag.Definitions)
	checkError(err)
	write(out, fmt.Sprintf("const %s_definitions = %q", filename, string(def)))

	write(out, `
func init() {
	var (
		p = make(map[string]interface{})
		d = make(map[string]interface{})
	)

	err := json.Unmarshal([]byte(`+filename+`_paths), &p)
	if err != nil{
		panic(err)
	}
	err = json.Unmarshal([]byte(`+filename+`_definitions), &d)
	if err != nil{
		panic(err)
	}
	grpcgw.RegisterSwagger(p, d)
}
`)

	formatted, err := format.Source(out.Bytes())
	if err != nil {
		log.Fatal("Format go code failed", log.Err(err))
	}

	if outputFile == "Stdout" {
		write(os.Stdout, string(formatted))
		return
	}
	outFile, err := os.Create(outputFile)
	if err != nil {
		log.Fatal("Create file failed", log.Err(err))
	}
	defer outFile.Close()
	write(outFile, string(formatted))
}

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func write(w io.Writer, text string) {
	_, err := fmt.Fprintln(w, text)
	if err != nil {
		panic(err)
	}
}

var swaggerToGoCmd = &cobra.Command{
	Use: "swagger-to-go [fileName] --pkg [packageName] --out [output]",
	Short: `wrap swagger json file into a golang file and register it
		in grpcgw package to show as service doc`,
	Args: cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		swaggerToGo(args[0])
	},
}

func init() {
	swaggerToGoCmd.Flags().StringVarP(&pkgName, "pkg", "p", "", "target package name")
	swaggerToGoCmd.Flags().StringVarP(&outputFile, "out", "o", "Stdout", "output file")
	cmd.RootCmd.AddCommand(swaggerToGoCmd)
}
